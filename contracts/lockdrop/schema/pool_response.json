{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PoolResponse",
  "type": "object",
  "required": [
    "asset_global_reward_index",
    "astro_global_reward_index",
    "astroport_pair",
    "cw20_asset",
    "incentives_percent",
    "is_migrated",
    "is_staked",
    "native_asset",
    "terraswap_pair",
    "weighted_amount"
  ],
  "properties": {
    "asset_global_reward_index": {
      "description": "Ratio of ASSET rewards accured to total_lp_deposited. Used to calculate ASSET incentives accured by each user",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal256"
        }
      ]
    },
    "astro_global_reward_index": {
      "description": "Ratio of ASTRO rewards accured to total_lp_deposited. Used to calculate ASTRO incentives accured by each user",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal256"
        }
      ]
    },
    "astroport_pair": {
      "description": "Astroport Pool Details",
      "allOf": [
        {
          "$ref": "#/definitions/LiquidityPool"
        }
      ]
    },
    "cw20_asset": {
      "description": "Pair's cw20 token",
      "allOf": [
        {
          "$ref": "#/definitions/Cw20Asset"
        }
      ]
    },
    "incentives_percent": {
      "description": "% of total ASTRO incentives allocated to this pool",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal256"
        }
      ]
    },
    "is_migrated": {
      "description": "Boolean value indicating if the liquidity has been migrated or not",
      "type": "boolean"
    },
    "is_staked": {
      "description": "Boolean value indicating if the LP Tokens are staked with the Generator contract or not",
      "type": "boolean"
    },
    "native_asset": {
      "description": "Pair's Native token (uusd/uluna)",
      "allOf": [
        {
          "$ref": "#/definitions/NativeAsset"
        }
      ]
    },
    "terraswap_pair": {
      "description": "Terraswap Pool Details",
      "allOf": [
        {
          "$ref": "#/definitions/LiquidityPool"
        }
      ]
    },
    "weighted_amount": {
      "description": "Weighted LP Token balance used to calculate ASTRO rewards a particular user can claim",
      "allOf": [
        {
          "$ref": "#/definitions/Uint256"
        }
      ]
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Cw20Asset": {
      "type": "object",
      "required": [
        "contract_addr"
      ],
      "properties": {
        "contract_addr": {
          "type": "string"
        }
      }
    },
    "Decimal256": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0 The greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "LiquidityPool": {
      "type": "object",
      "required": [
        "amount",
        "lp_token_addr",
        "pair_addr"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint256"
        },
        "lp_token_addr": {
          "$ref": "#/definitions/Addr"
        },
        "pair_addr": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "NativeAsset": {
      "type": "object",
      "required": [
        "denom"
      ],
      "properties": {
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint256": {
      "type": "string"
    }
  }
}
